/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package org.ddd.shared.infrastructure.kafka.category.avro.model;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class CategoryResponseAvroModel extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -6678239803932667543L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"CategoryResponseAvroModel\",\"namespace\":\"org.ddd.shared.infrastructure.kafka.category.avro.model\",\"fields\":[{\"name\":\"id\",\"type\":{\"type\":\"string\",\"logicalType\":\"uuid\"}},{\"name\":\"name\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"slug\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"numOfProducts\",\"type\":\"int\"},{\"name\":\"isActive\",\"type\":\"boolean\"},{\"name\":\"failureMessages\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"string\",\"avro.java.string\":\"String\"}}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<CategoryResponseAvroModel> ENCODER =
      new BinaryMessageEncoder<CategoryResponseAvroModel>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<CategoryResponseAvroModel> DECODER =
      new BinaryMessageDecoder<CategoryResponseAvroModel>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<CategoryResponseAvroModel> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<CategoryResponseAvroModel> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<CategoryResponseAvroModel> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<CategoryResponseAvroModel>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this CategoryResponseAvroModel to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a CategoryResponseAvroModel from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a CategoryResponseAvroModel instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static CategoryResponseAvroModel fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  private java.lang.String id;
  private java.lang.String name;
  private java.lang.String slug;
  private int numOfProducts;
  private boolean isActive;
  private java.util.List<java.lang.String> failureMessages;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public CategoryResponseAvroModel() {}

  /**
   * All-args constructor.
   * @param id The new value for id
   * @param name The new value for name
   * @param slug The new value for slug
   * @param numOfProducts The new value for numOfProducts
   * @param isActive The new value for isActive
   * @param failureMessages The new value for failureMessages
   */
  public CategoryResponseAvroModel(java.lang.String id, java.lang.String name, java.lang.String slug, java.lang.Integer numOfProducts, java.lang.Boolean isActive, java.util.List<java.lang.String> failureMessages) {
    this.id = id;
    this.name = name;
    this.slug = slug;
    this.numOfProducts = numOfProducts;
    this.isActive = isActive;
    this.failureMessages = failureMessages;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return id;
    case 1: return name;
    case 2: return slug;
    case 3: return numOfProducts;
    case 4: return isActive;
    case 5: return failureMessages;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  private static final org.apache.avro.Conversion<?>[] conversions =
      new org.apache.avro.Conversion<?>[] {
      null,
      null,
      null,
      null,
      null,
      null,
      null
  };

  @Override
  public org.apache.avro.Conversion<?> getConversion(int field) {
    return conversions[field];
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: id = value$ != null ? value$.toString() : null; break;
    case 1: name = value$ != null ? value$.toString() : null; break;
    case 2: slug = value$ != null ? value$.toString() : null; break;
    case 3: numOfProducts = (java.lang.Integer)value$; break;
    case 4: isActive = (java.lang.Boolean)value$; break;
    case 5: failureMessages = (java.util.List<java.lang.String>)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'id' field.
   * @return The value of the 'id' field.
   */
  public java.lang.String getId() {
    return id;
  }


  /**
   * Sets the value of the 'id' field.
   * @param value the value to set.
   */
  public void setId(java.lang.String value) {
    this.id = value;
  }

  /**
   * Gets the value of the 'name' field.
   * @return The value of the 'name' field.
   */
  public java.lang.String getName() {
    return name;
  }


  /**
   * Sets the value of the 'name' field.
   * @param value the value to set.
   */
  public void setName(java.lang.String value) {
    this.name = value;
  }

  /**
   * Gets the value of the 'slug' field.
   * @return The value of the 'slug' field.
   */
  public java.lang.String getSlug() {
    return slug;
  }


  /**
   * Sets the value of the 'slug' field.
   * @param value the value to set.
   */
  public void setSlug(java.lang.String value) {
    this.slug = value;
  }

  /**
   * Gets the value of the 'numOfProducts' field.
   * @return The value of the 'numOfProducts' field.
   */
  public int getNumOfProducts() {
    return numOfProducts;
  }


  /**
   * Sets the value of the 'numOfProducts' field.
   * @param value the value to set.
   */
  public void setNumOfProducts(int value) {
    this.numOfProducts = value;
  }

  /**
   * Gets the value of the 'isActive' field.
   * @return The value of the 'isActive' field.
   */
  public boolean getIsActive() {
    return isActive;
  }


  /**
   * Sets the value of the 'isActive' field.
   * @param value the value to set.
   */
  public void setIsActive(boolean value) {
    this.isActive = value;
  }

  /**
   * Gets the value of the 'failureMessages' field.
   * @return The value of the 'failureMessages' field.
   */
  public java.util.List<java.lang.String> getFailureMessages() {
    return failureMessages;
  }


  /**
   * Sets the value of the 'failureMessages' field.
   * @param value the value to set.
   */
  public void setFailureMessages(java.util.List<java.lang.String> value) {
    this.failureMessages = value;
  }

  /**
   * Creates a new CategoryResponseAvroModel RecordBuilder.
   * @return A new CategoryResponseAvroModel RecordBuilder
   */
  public static org.ddd.shared.infrastructure.kafka.category.avro.model.CategoryResponseAvroModel.Builder newBuilder() {
    return new org.ddd.shared.infrastructure.kafka.category.avro.model.CategoryResponseAvroModel.Builder();
  }

  /**
   * Creates a new CategoryResponseAvroModel RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new CategoryResponseAvroModel RecordBuilder
   */
  public static org.ddd.shared.infrastructure.kafka.category.avro.model.CategoryResponseAvroModel.Builder newBuilder(org.ddd.shared.infrastructure.kafka.category.avro.model.CategoryResponseAvroModel.Builder other) {
    if (other == null) {
      return new org.ddd.shared.infrastructure.kafka.category.avro.model.CategoryResponseAvroModel.Builder();
    } else {
      return new org.ddd.shared.infrastructure.kafka.category.avro.model.CategoryResponseAvroModel.Builder(other);
    }
  }

  /**
   * Creates a new CategoryResponseAvroModel RecordBuilder by copying an existing CategoryResponseAvroModel instance.
   * @param other The existing instance to copy.
   * @return A new CategoryResponseAvroModel RecordBuilder
   */
  public static org.ddd.shared.infrastructure.kafka.category.avro.model.CategoryResponseAvroModel.Builder newBuilder(org.ddd.shared.infrastructure.kafka.category.avro.model.CategoryResponseAvroModel other) {
    if (other == null) {
      return new org.ddd.shared.infrastructure.kafka.category.avro.model.CategoryResponseAvroModel.Builder();
    } else {
      return new org.ddd.shared.infrastructure.kafka.category.avro.model.CategoryResponseAvroModel.Builder(other);
    }
  }

  /**
   * RecordBuilder for CategoryResponseAvroModel instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<CategoryResponseAvroModel>
    implements org.apache.avro.data.RecordBuilder<CategoryResponseAvroModel> {

    private java.lang.String id;
    private java.lang.String name;
    private java.lang.String slug;
    private int numOfProducts;
    private boolean isActive;
    private java.util.List<java.lang.String> failureMessages;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(org.ddd.shared.infrastructure.kafka.category.avro.model.CategoryResponseAvroModel.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.name)) {
        this.name = data().deepCopy(fields()[1].schema(), other.name);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.slug)) {
        this.slug = data().deepCopy(fields()[2].schema(), other.slug);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.numOfProducts)) {
        this.numOfProducts = data().deepCopy(fields()[3].schema(), other.numOfProducts);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.isActive)) {
        this.isActive = data().deepCopy(fields()[4].schema(), other.isActive);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.failureMessages)) {
        this.failureMessages = data().deepCopy(fields()[5].schema(), other.failureMessages);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
    }

    /**
     * Creates a Builder by copying an existing CategoryResponseAvroModel instance
     * @param other The existing instance to copy.
     */
    private Builder(org.ddd.shared.infrastructure.kafka.category.avro.model.CategoryResponseAvroModel other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.name)) {
        this.name = data().deepCopy(fields()[1].schema(), other.name);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.slug)) {
        this.slug = data().deepCopy(fields()[2].schema(), other.slug);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.numOfProducts)) {
        this.numOfProducts = data().deepCopy(fields()[3].schema(), other.numOfProducts);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.isActive)) {
        this.isActive = data().deepCopy(fields()[4].schema(), other.isActive);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.failureMessages)) {
        this.failureMessages = data().deepCopy(fields()[5].schema(), other.failureMessages);
        fieldSetFlags()[5] = true;
      }
    }

    /**
      * Gets the value of the 'id' field.
      * @return The value.
      */
    public java.lang.String getId() {
      return id;
    }


    /**
      * Sets the value of the 'id' field.
      * @param value The value of 'id'.
      * @return This builder.
      */
    public org.ddd.shared.infrastructure.kafka.category.avro.model.CategoryResponseAvroModel.Builder setId(java.lang.String value) {
      validate(fields()[0], value);
      this.id = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'id' field has been set.
      * @return True if the 'id' field has been set, false otherwise.
      */
    public boolean hasId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'id' field.
      * @return This builder.
      */
    public org.ddd.shared.infrastructure.kafka.category.avro.model.CategoryResponseAvroModel.Builder clearId() {
      id = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'name' field.
      * @return The value.
      */
    public java.lang.String getName() {
      return name;
    }


    /**
      * Sets the value of the 'name' field.
      * @param value The value of 'name'.
      * @return This builder.
      */
    public org.ddd.shared.infrastructure.kafka.category.avro.model.CategoryResponseAvroModel.Builder setName(java.lang.String value) {
      validate(fields()[1], value);
      this.name = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'name' field has been set.
      * @return True if the 'name' field has been set, false otherwise.
      */
    public boolean hasName() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'name' field.
      * @return This builder.
      */
    public org.ddd.shared.infrastructure.kafka.category.avro.model.CategoryResponseAvroModel.Builder clearName() {
      name = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'slug' field.
      * @return The value.
      */
    public java.lang.String getSlug() {
      return slug;
    }


    /**
      * Sets the value of the 'slug' field.
      * @param value The value of 'slug'.
      * @return This builder.
      */
    public org.ddd.shared.infrastructure.kafka.category.avro.model.CategoryResponseAvroModel.Builder setSlug(java.lang.String value) {
      validate(fields()[2], value);
      this.slug = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'slug' field has been set.
      * @return True if the 'slug' field has been set, false otherwise.
      */
    public boolean hasSlug() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'slug' field.
      * @return This builder.
      */
    public org.ddd.shared.infrastructure.kafka.category.avro.model.CategoryResponseAvroModel.Builder clearSlug() {
      slug = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'numOfProducts' field.
      * @return The value.
      */
    public int getNumOfProducts() {
      return numOfProducts;
    }


    /**
      * Sets the value of the 'numOfProducts' field.
      * @param value The value of 'numOfProducts'.
      * @return This builder.
      */
    public org.ddd.shared.infrastructure.kafka.category.avro.model.CategoryResponseAvroModel.Builder setNumOfProducts(int value) {
      validate(fields()[3], value);
      this.numOfProducts = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'numOfProducts' field has been set.
      * @return True if the 'numOfProducts' field has been set, false otherwise.
      */
    public boolean hasNumOfProducts() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'numOfProducts' field.
      * @return This builder.
      */
    public org.ddd.shared.infrastructure.kafka.category.avro.model.CategoryResponseAvroModel.Builder clearNumOfProducts() {
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'isActive' field.
      * @return The value.
      */
    public boolean getIsActive() {
      return isActive;
    }


    /**
      * Sets the value of the 'isActive' field.
      * @param value The value of 'isActive'.
      * @return This builder.
      */
    public org.ddd.shared.infrastructure.kafka.category.avro.model.CategoryResponseAvroModel.Builder setIsActive(boolean value) {
      validate(fields()[4], value);
      this.isActive = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'isActive' field has been set.
      * @return True if the 'isActive' field has been set, false otherwise.
      */
    public boolean hasIsActive() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'isActive' field.
      * @return This builder.
      */
    public org.ddd.shared.infrastructure.kafka.category.avro.model.CategoryResponseAvroModel.Builder clearIsActive() {
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'failureMessages' field.
      * @return The value.
      */
    public java.util.List<java.lang.String> getFailureMessages() {
      return failureMessages;
    }


    /**
      * Sets the value of the 'failureMessages' field.
      * @param value The value of 'failureMessages'.
      * @return This builder.
      */
    public org.ddd.shared.infrastructure.kafka.category.avro.model.CategoryResponseAvroModel.Builder setFailureMessages(java.util.List<java.lang.String> value) {
      validate(fields()[5], value);
      this.failureMessages = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'failureMessages' field has been set.
      * @return True if the 'failureMessages' field has been set, false otherwise.
      */
    public boolean hasFailureMessages() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'failureMessages' field.
      * @return This builder.
      */
    public org.ddd.shared.infrastructure.kafka.category.avro.model.CategoryResponseAvroModel.Builder clearFailureMessages() {
      failureMessages = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public CategoryResponseAvroModel build() {
      try {
        CategoryResponseAvroModel record = new CategoryResponseAvroModel();
        record.id = fieldSetFlags()[0] ? this.id : (java.lang.String) defaultValue(fields()[0]);
        record.name = fieldSetFlags()[1] ? this.name : (java.lang.String) defaultValue(fields()[1]);
        record.slug = fieldSetFlags()[2] ? this.slug : (java.lang.String) defaultValue(fields()[2]);
        record.numOfProducts = fieldSetFlags()[3] ? this.numOfProducts : (java.lang.Integer) defaultValue(fields()[3]);
        record.isActive = fieldSetFlags()[4] ? this.isActive : (java.lang.Boolean) defaultValue(fields()[4]);
        record.failureMessages = fieldSetFlags()[5] ? this.failureMessages : (java.util.List<java.lang.String>) defaultValue(fields()[5]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<CategoryResponseAvroModel>
    WRITER$ = (org.apache.avro.io.DatumWriter<CategoryResponseAvroModel>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<CategoryResponseAvroModel>
    READER$ = (org.apache.avro.io.DatumReader<CategoryResponseAvroModel>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}










